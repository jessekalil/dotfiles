unsetopt correct_all
unsetopt correct

# Use powerline
USE_POWERLINE="true"
# Source manjaro-zsh-configuration
if [[ -e /usr/share/zsh/manjaro-zsh-config ]]; then
  source /usr/share/zsh/manjaro-zsh-config
fi

ZSH_THEME="spaceship"

export UID=$UID
export GID=$GID
export PATH="$HOME/.local/bin":$PATH
export PATH="$HOME/bin":$PATH
export LANG=en_US.UTF-8
export ZSH="$HOME/.oh-my-zsh"
export SPACESHIP_CONFIG="$HOME/.spaceshiprc.zsh"
export TERM="xterm-256color"
export NODE_PATH=`which node`
export BAT_THEME="Dracula"
export GITHUB_USERNAME="jessekalil"
export AWS_DEFAULT_PROFILE="{{ .user.aws.profile }}"
export AWS_SDK_LOAD_CONFIG=1

# Local Configs
if [[ -f "$HOME/.zshrc.local" ]]; then
  source "$HOME/.zshrc.local"
fi

if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
elif [ "$TERM_PROGRAM" = "vscode" ]; then
  export EDITOR='code --wait'
else
  export EDITOR='nvim'
fi

### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

zinit light zdharma/fast-syntax-highlighting
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-completions
### End of Zinit's installer chunk

# ZSH Plugins
plugins=(
  asdf
  git
  vscode
  node
  docker
  aws
  gh
  golang
  history
)
source $ZSH/oh-my-zsh.sh

# Aliases
alias vsc="code ."
alias zed="zeditor"
alias back="cd $OLDPWD"
alias getclip="powershell.exe Get-Clipboard"
alias grbdev="gsta && gcd && ggl && gco - && grbd && gstp"
alias explorer="explorer.exe ."
alias lz="lazygit"
alias ls="eza --icons=always"
alias la='eza -a --icons=always'
alias myip='curl ifconfig.me'
alias curltime="curl -w \"@$HOME/.curl-format.txt\" -o /dev/null -s "
alias open="xdg-open"
alias dk='docker'
alias dc='docker compose'
alias catt="bat -pp"
alias cat="bat"

# alias make50='make CC=clang CFLAGS="-fsanitize=signed-integer-overflow -fsanitize=undefined -ggdb3 -O0 -std=c11 -Wall -Werror -Wextra -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wshadow" LDLIBS="-lcrypt -lcs50 -lm"'

###
fpath+=${ZSH_CUSTOM:-${ZSH:-~/.oh-my-zsh}/custom}/plugins/zsh-completions/src

# Nvm
if [[ -s "$HOME/.nvm/nvm.sh" ]]; then
  export NVM_DIR="$HOME/.nvm"
  source "$NVM_DIR/nvm.sh"
  source "$NVM_DIR/bash_completion"
fi

# Pnpm
export PNPM_HOME="/home/jesse/.local/share/pnpm"
case ":$PATH:" in
    *":$PNPM_HOME:"*) ;;
    *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# Go
export PATH=$PATH:/usr/local/go/bin
export PATH="$PATH:$(go env GOPATH)/bin"
## export GOPATH="$(go env GOPATH)"

# Bun
export PATH="$HOME/.bun/bin:$PATH"
[ -s "$HOME/.bun/_bun" ] && source "$HOME/.bun/_bun"
export BUN_INSTALL="$HOME/.bun"

# Cargo
if [ -f "$HOME/.cargo/env" ]; then
  source "$HOME/.cargo/env"
fi

# NVM
## autoload -U add-zsh-hook
## load-nvmrc() {
##   local nvmrc_path
##   nvmrc_path="$(nvm_find_nvmrc)"
##
##   if [ -n "$nvmrc_path" ]; then
##     local nvmrc_node_version
##     nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")
##
##     if [ "$nvmrc_node_version" = "N/A" ]; then
##       nvm install
##     elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
##       nvm use
##     fi
##   elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
##     echo "Reverting to nvm default version"
##     nvm use default
##   fi
## }
## add-zsh-hook chpwd load-nvmrc
## load-nvmrc
#######################

# ASDF
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
if [[ -e /opt/asdf-vm/asdf.sh ]]; then
  . /opt/asdf-vm/asdf.sh
fi

# Yazi
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# FZF
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# Zoxide
eval "$(zoxide init --cmd cd zsh)"

# Github Copilot
eval "$(gh copilot alias -- zsh)"

# Universal alias
p() {
  if [[ -f bun.lockb ]]; then
    command bun "$@"
  elif [[ -f pnpm-lock.yaml ]]; then
    command pnpm "$@"
  elif [[ -f yarn.lock ]]; then
    command yarn "$@"
  elif [[ -f package-lock.json ]]; then
    command npm "$@"
  else
    command pnpm "$@"
  fi
}
