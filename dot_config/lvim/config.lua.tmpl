-- general
lvim.colorscheme = "tokyonight-night"
lvim.format_on_save = false
lvim.log.level = "info"
vim.opt.shiftwidth = 2
vim.opt.tabstop = 2
vim.opt.relativenumber = true
vim.opt.wrap = false

-- keymappings
lvim.leader = "space"
lvim.builtin.which_key.mappings["t"] = {
  name = "Trouble",
  r = { "<cmd>Trouble lsp_references<cr>", "References" },
  f = { "<cmd>Trouble lsp_definitions<cr>", "Definitions" },
  d = { "<cmd>Trouble document_diagnostics<cr>", "Diagnostics" },
  q = { "<cmd>Trouble quickfix<cr>", "QuickFix" },
  l = { "<cmd>Trouble loclist<cr>", "LocationList" },
  w = { "<cmd>Trouble workspace_diagnostics<cr>", "Diagnostics" },
}

-- Builtin
lvim.builtin.alpha.active = true
lvim.builtin.alpha.mode = "dashboard"
lvim.builtin.terminal.active = true
lvim.builtin.nvimtree.setup.view.side = "left"
lvim.builtin.nvimtree.setup.renderer.icons.show.git = false
lvim.builtin.treesitter.context_commentstring = nil

-- treesitter
lvim.builtin.treesitter.auto_install = false
lvim.builtin.treesitter.ensure_installed = {
  "javascript",
  "typescript",
  "lua",
  "json",
  "yaml",
  "html",
  "css",
  "bash",
  "go",
  "vue",
  "markdown",
  "dockerfile",
}
lvim.builtin.treesitter.ignore_install = { "haskell" }

-- LSP
lvim.lsp.installer.setup.automatic_installation = false

local formatters = require("lvim.lsp.null-ls.formatters")
formatters.setup({
  {
    name = "prettierd",
    args = { "--print-width", "90" },
    -- filetypes = { "javascript", "json", "typescript", "vue", "html", "css", "scss", "markdown" },
  }
})

local linters = require "lvim.lsp.null-ls.linters"
linters.setup {
  {
    source = "eslint",
    command = "eslint_d",
    -- args = { "--fix-to-stdout", "--stdin", "--stdin-filename", "$FILENAME" },
    -- format = "line",
    -- on_attach = function(client, _)
    --   client.resolved_capabilities.document_formatting = false
    -- end,
  },
}

-- -- Additional Plugins <https://www.lunarvim.org/docs/configuration/plugins/user-plugins>
lvim.plugins = {
  {
    "folke/trouble.nvim",
    dependencies = { "nvim-tree/nvim-web-devicons" },
    -- settings without a patched font or icons
    opts = {
      icons = false,
      fold_open = "v",      -- icon used for open folds
      fold_closed = ">",    -- icon used for closed folds
      indent_lines = false, -- add an indent guide below the fold icons
      signs = {
        -- icons / text used for a diagnostic
        error = "error",
        warning = "warn",
        hint = "hint",
        information = "info"
      },
      use_diagnostic_signs = false -- enabling this will use the signs defined in your lsp client
    }
  },
  {
    "baliestri/aura-theme",
    lazy = false,
    priority = 1000,
    config = function(plugin)
      vim.opt.rtp:append(plugin.dir .. "/packages/neovim")
      vim.cmd([[colorscheme aura-dark]])
    end
  },
  { "dracula/vim" },
  {
    "folke/tokyonight.nvim",
    lazy = false,
    priority = 1000,
    opts = {},
  },
  {
    "zbirenbaum/copilot-cmp",
    event = "InsertEnter",
    dependencies = { "zbirenbaum/copilot.lua" },
    config = function()
      vim.defer_fn(function()
        require("copilot").setup()
        require("copilot_cmp").setup()
      end, 100)
    end,
  },
  {
    "folke/todo-comments.nvim",
    event = "BufRead",
    config = function()
      require("todo-comments").setup()
    end,
  },
  -- Discord Presence
  {
    "andweeb/presence.nvim",
    confg = function()
      -- The setup config table shows all available config options with their default values:
      require("presence").setup({
        -- General options
        auto_update         = false,
        neovim_image_text   = "The One True Text Editor",
        main_image          = "neovim",
        -- client_id           = "793271441293967371",
        log_level           = nil,
        debounce_timeout    = 10,
        enable_line_number  = true,
        blacklist           = {},
        buttons             = false,
        file_assets         = {},
        show_time           = false,

        -- Rich Presence text options
        editing_text        = "Editing %s",
        file_explorer_text  = "Browsing %s",
        git_commit_text     = "Committing changes",
        plugin_manager_text = "Managing plugins",
        reading_text        = "Reading %s",
        -- workspace_text      = "Working on %s",
        line_number_text    = "Line %s out of %s",
      })
    end,
  }
}
